
/* Math.Random isn't really cryptographically secure, and thus I don't think that a simple rock-paper-scissors game needs to be either */
@keyframes RNGAnimation {
    0% {
        order: 5;
    }
    50% {
        order: 4;
    }
    100% {
        order: 6;
    }
}

/* Remove the margin, set the font, and default color */
body, html {
    margin: 0;
    font-family: Arial, sans-serif;
    color: #FFF;

}
/* Set up the main window, and center it. Using fixed px sizes so that it's easier to work with, even though it isn't mobile-friendly */
.content {
    width: 500px;
    height: 250px;
    background: black;
    position: absolute;
    top: calc(45% - 250px);
    left: calc(50% - 250px);
    padding: 1em;
    border-radius: 1em;
    text-align: center;
    overflow: hidden;
}

/* Display the choices and space them nicely */
.choices {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

/* The cover will hide the other two choices in the hidden overflow, thus it's fixed at 96px */
.cover {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    overflow: hidden;
    width: 96px;
    margin: auto;
    background: black;
    height: 250px;
}

/* This hides the main choices when something was selected, otherwise you could change your choice after the fact */
#reset:not(:checked) ~ .resultframe {
    width: 500px;
    height: 250px;
    position: absolute;
    z-index: 99;
    padding: 1em;
    border-radius: 1em;
    top: 0;
    left: 0;
    background: black;
}

/* Gives the "Play again?" button some pop to indicate that it can be clicked */
.reset {
    border: 1px gray outset;
    border-radius: 10px;
    background: lightgray;
    color: black;
    padding: 3px;
}

/* This cycles the position of the choices over the course of 12ms. Steps prevent it from being caught mid-transition */
.result {
    opacity: 0;
    animation: 12ms RNGAnimation steps(1,end) infinite;
}

/* These next offset the other two choices so that they don't collide with positioning*/
.paperresult {
    animation-delay: 4ms;
}

.scissorsresult {
    animation-delay: 8ms;
}

/* All inputs are hidden,  */
input {
    display: none;
}

/* Stop the animation and make it visible once a choice has been selected */

input:checked ~ .result {
    opacity: 1;
    animation-play-state: paused;
    transition: 0.5s;
}

/* Victory messages, sorry that they don't show what you picked, but this saves on code */

#radiorock:checked ~ .rockresult:before,
#radiopaper:checked ~ .paperresult:before,
#radioscissors:checked ~ .scissorsresult:before {
    content: 'The result is a tie.';
}

#radiorock:checked ~ .paperresult:before,
#radiopaper:checked ~ .scissorsresult:before,
#radioscissors:checked ~ .rockresult:before {
    content: 'You lost.';
}

#radiorock:checked ~ .scissorsresult:before,
#radiopaper:checked ~ .rockresult:before,
#radioscissors:checked ~ .paperresult:before {
    content: 'YOU WON!';
}

/* some zoom, to give the images some more life */
img:hover {
    transform: scale(1.2);
    transition: 0.2s;
}

img {
    transition: 0.2s;
}

/* Show that you can click the choices and try again button */
.choice, .reset {
    cursor: pointer;
}

